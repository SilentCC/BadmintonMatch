// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      =  env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id    String @id @default(uuid())
  title String
  text  String

  // To return `Date`s intact through the API we use transformers
  // https://trpc.io/docs/v11/data-transformers
  // This is unique so it can be used for cursor-based pagination
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id            String           @id @default(cuid())
  name          String?         @unique
  nickname      String?         @unique
  password      String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?         // OAuth provider avatar URL
  provider      String?         // OAuth provider (google, github, twitter)
  providerId    String?         // OAuth provider's user ID
  accounts      Account[]
  sessions      Session[]
  singleRanks   SingleRank[]
  partnerships  Partnership[]   @relation("Player1Partnerships")
  partnerships2 Partnership[]   @relation("Player2Partnerships")
  Authenticator Authenticator[]
  matches       Match[]         @relation("Player1Matches")
  matches2      Match[]         @relation("Player2Matches")
  stats         PlayerStats?
  yearStars     YearStar[]
  resetToken       String?   @unique
  resetTokenExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerId])
}

model SingleRank {
  id        String   @id @default(cuid())
  score     Int      @default(0)
  rank      Int      @default(0)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([score])
}

model Partnership {
  id          String       @id @default(cuid())
  player1Id   String
  player2Id   String
  player1     User         @relation("Player1Partnerships", fields: [player1Id], references: [id])
  player2     User         @relation("Player2Partnerships", fields: [player2Id], references: [id])
  doubleRanks DoubleRank[]
  nickname    String?      @unique
  matches     Match[]      @relation("Partnership1Matches")
  matches2    Match[]      @relation("Partnership2Matches")

  // Ensure no duplicate partnerships
  @@unique([player1Id, player2Id])

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model DoubleRank {
  id             String       @id @default(cuid())
  score          Int          @default(0)
  rank           Int          @default(0)
  partnershipId  String
  partnership    Partnership  @relation(fields: [partnershipId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([score])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum MatchType {
  SINGLES
  DOUBLES
}

enum PointType{
  POINTS
  EATING
}

model Match {
  id             String       @id @default(cuid())
  type           MatchType
  pointType      PointType    @default(EATING)

  // Singles match fields
  player1Id      String?
  player1        User?        @relation("Player1Matches", fields: [player1Id], references: [id])
  player2Id      String?
  player2        User?        @relation("Player2Matches", fields: [player2Id], references: [id])

  // Doubles match fields
  partnership1Id String?
  partnership1   Partnership?  @relation("Partnership1Matches", fields: [partnership1Id], references: [id])
  partnership2Id String?
  partnership2   Partnership?  @relation("Partnership2Matches", fields: [partnership2Id], references: [id])

  // Match details
  rounds         MatchRound[]

  // Tournament or event information
  tournamentName String?
  eventName      String?

  // Match metadata
  matchDate      DateTime     @default(now())
  location       String?
  closed         Boolean       @default(false)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([matchDate])
  @@index([type])
}

model MatchRound {
  id             String       @id @default(cuid())
  matchId        String
  match          Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)

  // Scoring details for singles
  player1Score   Int?
  player2Score   Int?

  // Scoring details for doubles
  partnership1Score Int?
  partnership2Score Int?

  // Which round/set this score represents
  roundNumber    Int          @default(1)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([matchId, roundNumber])
  @@index([matchId])
}

model PlayerStats {
  id           String   @id @default(cuid())
  player       User     @relation(fields: [playerId], references: [id])
  playerId     String   @unique // One stats record per player
  totalMatches Int      @default(0)
  wonMatches   Int      @default(0)
  lostMatches  Int      @default(0)
  winPercentage Float   @default(0)
  updatedAt    DateTime @default(now()) @updatedAt

  @@index([playerId])
}

model YearStar {
  id        String   @id @default(cuid())
  year      Int
  rank      Int      // 1, 2, or 3
  score     Int      // Final score of that year
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([year, rank])  // Ensure one rank per year
  @@index([year])        // For efficient year-based queries
}
